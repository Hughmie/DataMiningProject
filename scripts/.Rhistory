library(neuralnet)
library(dplyr)
library(NeuralNetTools)
#import data
data <- read.csv("../datasets/data_outliers_processed.csv", stringsAsFactors = FALSE)
# inspect data
glimpse(data)
# categorical -> factor (except y)
# prepare for the conversion to dummy
cate_vars <- c("job","marital","education","default",
"housing","loan","contact","month",
"day_of_week","poutcome")
data[cate_vars] <- lapply(data[cate_vars], factor)
str(data)
# 读取数据
data <- read.csv("..?datasets/data_with_pca.csv", stringsAsFactors = TRUE)
# 读取数据
data <- read.csv("../datasets/data_with_pca.csv", stringsAsFactors = TRUE)
# 分割数据为训练集和测试集
set.seed(0) # 确保结果可重现
train_index <- createDataPartition(data$y, p = 0.7, list = FALSE)
train_data <- data[train_index, ]
test_data <- data[-train_index, ]
# 超采样
balanced_train_data <- ovun.sample(y ~ ., data = train_data, method = "over", N = 12410)$data
# 加载包
library(rpart)       # 用于构建决策树
library(rpart.plot)  # 用于可视化决策树
library(caret)       # 用于模型评估和数据处理
library(dplyr)
library(ROSE)
# 读取数据
data <- read.csv("../datasets/data_with_pca.csv", stringsAsFactors = TRUE)
# 分割数据为训练集和测试集
set.seed(0) # 确保结果可重现
train_index <- createDataPartition(data$y, p = 0.7, list = FALSE)
train_data <- data[train_index, ]
test_data <- data[-train_index, ]
# 超采样
balanced_train_data <- ovun.sample(y ~ ., data = train_data, method = "over", N = 12410)$data
table(balanced_train_data$y)
# 构建决策树模型
tree_model <- rpart(y ~ .,
data = balanced_train_data,
method = "class", # 用于分类
parms = list(split = "information"), # 使用信息增益
control = rpart.control(minsplit = 20, # 节点最小样本数
minbucket = 200,  # 叶节点最小样本数
maxdepth = 5,   # 树的最大深度
cp = 0.001))     # 复杂度参数
test_pred <- predict(tree_model, test_data, type = "class")
confusionMatrix(test_pred, test_data$y,positive = "yes")
# 查看模型摘要
print(tree_model)
summary(tree_model)
# 可视化决策树
rpart.plot(tree_model,
type = 4,
extra = 104,
box.palette = "GnBu",
branch.lty = 3,
shadow.col = "gray",
nn = TRUE)
# 在训练集上评估模型
train_pred <- predict(tree_model, train_data, type = "class")
confusionMatrix(train_pred, train_data$y,positive = "yes")
test_pred_prob <- predict(tree_model, test_data, type = "prob")[, "yes"]
roc_obj <- roc(test_data$y, test_pred_prob, levels = c("no", "yes"))
# 绘制ROC曲线
plot(roc_obj,
main = "ROC Curve for Decision Tree Model",
col = "blue",
lwd = 2,
print.auc = TRUE,
auc.polygon = TRUE,
auc.polygon.col = "lightblue",
print.thres = TRUE)
